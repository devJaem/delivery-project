datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId          Int          @id @default(autoincrement())
  nickName        String
  email           String       @unique
  password        String
  profilePicture  String?
  userType        UserType
  points          Int
  emailVerified   Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  restaurants     Restaurant[]
  orders          Order[]
  reviews         Review[]
  notifications   Notification[]
  refreshTokens   RefreshToken[]
  emailAuthCodes  EmailAuthCode[]
  carts           Cart?
}

model EmailAuthCode {
  emailCodeId Int      @id @default(autoincrement())
  token       String   @unique
  expires     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model RefreshToken {
  refreshTokenId Int       @id @default(autoincrement())
  userId         Int
  refreshToken   String    @unique
  createdAt      DateTime  @default(now())
  user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Cart {
  cartId        Int          @id @default(autoincrement())
  restaurantId  Int
  userId        Int          @unique
  createdAt     DateTime     @default(now())
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  cartItems     CartItem[]
}

model CartItem {
  cartItemId   Int          @id @default(autoincrement())
  cartId       Int
  menuId       Int
  quantity     Int
  createdAt    DateTime     @default(now())
  cart         Cart         @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  menu         Menu         @relation(fields: [menuId], references: [menuId], onDelete: Cascade)
  @@unique([cartId, menuId])
}

model Restaurant {
  restaurantId   Int          @id @default(autoincrement())
  ownerId        Int
  name           String
  address        String
  category       String
  description    String?
  restaurantPicture String?
  revenue        Int          @default(0)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  owner          User         @relation(fields: [ownerId], references: [userId], onDelete: Cascade)
  menus          Menu[]
  orders         Order[]
  reviews        Review[]
  notifications  Notification[]
  carts          Cart[]
  
  @@unique([ownerId, name])
}

model Menu {
  menuId        Int            @id @default(autoincrement())
  restaurantId  Int
  name          String
  price         Int
  description   String?
  menuPicture   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  orderItems    OrderItem[]
  cartItems     CartItem[]
  
  @@unique([restaurantId, name])
}

model Order {
  orderId       Int            @id @default(autoincrement())
  customerId    Int
  restaurantId  Int
  totalPrice    Int
  orderStatus   OrderStatus
  createdAt     DateTime       @default(now())
  customer      User           @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  restaurant    Restaurant     @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
  orderItems    OrderItem[]
}

model OrderItem {
  orderItemId   Int            @id @default(autoincrement())
  orderId       Int
  menuId        Int
  quantity      Int
  price         Int
  createdAt     DateTime       @default(now())
  order         Order          @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  menu          Menu           @relation(fields: [menuId], references: [menuId], onDelete: Cascade)
}

model Review {
  reviewId      Int          @id @default(autoincrement())
  customerId    Int
  restaurantId  Int
  rating        Int
  comment       String
  reviewPicture String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  customer      User         @relation(fields: [customerId], references: [userId], onDelete: Cascade)
  restaurant    Restaurant   @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
}

model Notification {
  notificationId  Int        @id @default(autoincrement())
  userId          Int
  restaurantId    Int
  orderStatus     OrderStatus
  message         String
  isRead          Boolean
  createdAt       DateTime   @default(now())
  user            User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  restaurant      Restaurant @relation(fields: [restaurantId], references: [restaurantId], onDelete: Cascade)
}

enum UserType {
  CUSTOMER
  OWNER
}

enum OrderStatus {
  PREPARING
  DELIVERING
  COMPLETED
}